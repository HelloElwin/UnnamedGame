#include <cstdio>
#include <string>

#include "utils.h"
#include "interface.h"
#include "map.h"

#define SQUARE_H 15
#define SQUARE_W 32
#define MAP_NUM 20

string background[MAP_R][MAP_C]; // background of each little map square
//0123456789 row: 6 column: 8
std::string number[10][MAP_R][MAP_C] = {
  {{" ", "█", "█", "█", "█", "█", "╗", " "},{"█", "█", " ", " ", " ", "█", "█", "╗"},{"█", "█", " ", " ", " ", "█", "█", "║"},{"█", "█", " ", " ", " ", "█", "█", "║"},{"╚", "█", "█", "█", "█", "█", "╔", "╝"},{" ", "╚", "═", "═", "═", "═", "╝", " "}},

  {{" ", " ", " ", "█", "█", "╗", " ", " "},{" ", " ", "█", "█", "█", "║", " ", " "},{" ", " ", "╚", "█", "█", "║", " ", " "},{" ", " ", " ", "█", "█", "║", " ", " "},{" ", " ", " ", "█", "█", "║", " ", " "},{" ", " ", " ", "╚", "═", "╝", " ", " "}}, 

  {{"█", "█", "█", "█", "█", "█", "╗", " "},{"╚", "═", "═", "═", "═", "█", "█", "╗"},{" ", "█", "█", "█", "█", "█", "╔", "╝"},{"█", "█", "╔", "═", "═", "═", "╝", " "},{"█", "█", "█", "█", "█", "█", "█", "╗"},{"╚", "═", "═", "═", "═", "═". "═", "╝"}},

  {{"█", "█", "█", "█", "█", "█", "╗", " "},{"╚", "═", "═", "═", "═", "█", "█", "╗"},{" ", "█", "█", "█", "█", "█", "╔", "╝"},{" ", "╚", "═", "═", "═", "█", "█", "╗"},{"█", "█", "█", "█", "█", "█", "╔", "╝"},{"╚", "═", "═", "═", "═", "═", "╝", " "}},

  {{"█", "█", "╗", " ", " ", "█", "█", "╗"},{"█", "█", "║", " ", " ", "█", "█", "║"},{"█", "█", "█", "█", "█", "█", "█", "║"},{"╚", "═", "═", "═", "═", "█", "█", "║"},{" ", " ", " ", " ", " ", "█", "█", "║"},{" ", " ", " ", " ", " ", "╚", "═", "╝"}},

  {{"█", "█", "█", "█", "█", "█", "█", "╗"},{"█", "█", "╔", "═", "═", "═", "═", "╝"},{"█", "█", "█", "█", "█", "█", "█", "╗"},{"╚", "═", "═", "═", "═", "█", "█", "║"},{"█", "█", "█", "█", "█", "█", "█", "║"},{"╚", "═", "═", "═", "═", "═", "═", "╝"}},

  {{" ", "█", "█", "█", "█", "█", "╗", " "},{"█", "█", "╔", "═", "═", "═", "╝", " "},{"█", "█", "█", "█", "█", "█", "╗", " "},{"█", "█", "╔", "═", "═", "█", "█", "╗"},{"╚", "█", "█", "█", "█", "█", "╔", "╝"},{" ", "╚", "═", "═", "═", "═", "╝", " "}},

  {{"█", "█", "█", "█", "█", "█", "█", "╗"},{"╚", "═", "═", "═", "═", "█", "█", "║"},{" ", " ", " ", " ", "█", "█", "╔", "╝"},{" ", " ", " ", "█", "█", "╔", "╝", " "},{" ", " ", " ", "█", "█", "║", " ", " "},{" ", " ", " ", "╚", "═", "╝", " ", " "}},

  {{" ", "█", "█", "█", "█", "█", "╗", " "},{"█", "█", "╔", "═", "═", "█", "█", "╗"},{"╚", "█", "█", "█", "█", "█", "╔", "╝"},{"█", "█", "╔", "═", "═", "█", "█", "╗"},{"╚", "█", "█", "█", "█", "█", "╔", "╝"},{" ", "╚", "═", "═", "═", "═", "╝", " "}}, 

  {{" ", "█", "█", "█", "█", "█", "╗", " "},{"█", "█", "╔", "═", "═", "█", "█", "╗"},{"╚", "█", "█", "█", "█", "█", "█", "║"},{" ", "╚", "═", "═", "═", "█", "█", "║"},{" ", "█", "█", "█", "█", "█", "╔", "╝"},{" ", "╚", "═", "═", "═", "═", "╝", " "}}
}; 

void clear_screen() {
  printf("\033[2J\033[1;1H");
}

void show_map_selection(std::string &selection) {
  int select = 0;
  //char content[MAP_NUM][SQUARE_H][SQUARE_W];
  char interface[MAP_R][MAP_C];
  int levnum = MAP_C / SQUARE_W;
  for (int i = 0; i < MAP_NUM; i++)
    draw_insert((select / levnum) * SQUARE_H + 1, (select % levnum) * SQUARE_W + 1, SQUARE_H - 2, SQUARE_W - 2, background, interface);
    if (i / 10 == 0)
      draw_insert((select / levnum) * SQUARE_H, (select % levnum) * SQUARE_W, SQUARE_H, SQUARE_W, number[i + 1], interface);
    else
      continue;
  char key;
  key = get_keyboard();
  draw_border((select / levnum) * SQUARE_H, (select % levnum) * SQUARE_W, SQUARE_H, SQUARE_W, interface); 
  show_interface(MAP_R, MAP_C, interface);
  while (key == 'w' || key == 'a' || key == 's' || key == 'd') {
    switch(key) {
      case 'w':
        if (select / SQUARE_W == 0)
          break;
        select -= SQUARE_W;
        break;
      case 'a':
        if (select % SQUARE_W == 0)
          break;
        select -= 1;
        break;
      case 's':
        if (select / SQUARE_W == SQUARE_H - 1)
          break;
        select += SQUARE_W;
        break;
      case 'd':
        if (select % SQUARE_W == SQUARE_W - 1)
          break;
        select += 1;
        break;
    }
    draw_border((select / levnum) * SQUARE_H, (select % levnum) * SQUARE_W, SQUARE_H, SQUARE_W, interface); 
    show_interface(MAP_R, MAP_C, interface);
    key = get_key_board();
  }
  selection = to_string(select + 1);
}
  
  
